# Data types: INTEGER (whole number), TEXT (text string), DATE (YYYY-MM-DD), REAL (decimal value)
# Operators: = equals, != not equals, > greater than, < less than, >= greater than or equal to, <= less than or equal to

CREATE TABLE table_name (column_1 data_type, column_2 data_type, column_3 data_type);

# Add a row to the table. In the code editor type
INSERT INTO table_name (column_1, column_2, column_3) VALUES (1, 'Justin Bieber', 21);
INSERT INTO table_name (column_1, column_2, column_3) VALUES (2, 'Beyonce Knowles', 33); 
INSERT INTO table_name (column_1, column_2, column_3) VALUES (3, 'Jeremy Lin', 26); 
INSERT INTO table_name (column_1, column_2, column_3) VALUES (4, 'Taylor Swift', 26);

# edit a row. UPDATE is a clause that edits a row in the table. SET is a clause that indicates the column to edit. 22 is the new value 
# that is going to be inserted into the edited column. WHERE is a clause that indicates which row(s) to update with the new column value
UPDATE table_name SET column_3 = 22 WHERE column_1 = 1;

# Add a new column to the table. ADD COLUMN is a clause that lets add a new column to a table. TEXT is the data type for the new column
ALTER TABLE table_name ADD COLUMN twitter_handle TEXT;

# The DELETE FROM statement deletes one or more rows from a table. WHERE is a clause that lets select which rows to delete. IS NULL is a
# condition in SQL that returns true when the value is NULL and false otherwise.
DELETE FROM table_name WHERE twitter_handle IS NULL;

### QUERING ###

# return information from a relational database. To view the table
SELECT * FROM table_name;
# * - allows to select every column in a table without having to name each one.

# SELECT returns all data in the column_2 of the table_name table.
SELECT column_2 FROM table_name;

# look at multiple columns.
SELECT name, imdb_rating FROM movies;

# return unique values. filters out all duplicate values. genre - name of the column to display. FROM movies indicates the table.
SELECT DISTINCT genre FROM movies;

# This statement filters the result set to only include movies with IMDb ratings greater than 8
SELECT * FROM movies WHERE imdb_rating > 8;

# LIKE is a special operator used with the WHERE clause to search for a specific pattern in a column. Here, we are comparing two 
# movies with the same name but are spelled differently. Se_en represents a pattern with a wildcard character. 
SELECT * FROM movies WHERE name LIKE 'Se_en';

# % - matches zero or more missing letters in the pattern. A% matches all movies with names begin with "A". %a matches all that 
# end with "a". %man% - any movie that contains the word "man" in its name will be returned. LIKE is not case sensitive.
SELECT * FROM movies WHERE name LIKE 'a%';

# The BETWEEN operator is used to filter the result set within a certain range. The values can be numbers, text, dates. 
# This statement filters the result set to only include movies with names that begin with letters "A" up to but not including "J".
SELECT * FROM movies WHERE name BETWEEN 'A' AND 'J';
# Only include movies with years between 1990 up to and including 2000.
SELECT * FROM movies WHERE year BETWEEN 1990 AND 2000;

# Sometimes you want to combine multiple conditions in a WHERE clause to make the result set more specific and useful. 
# One way of doing this is to use the AND operator. AND genre = 'comedy' is the second condition in the WHERE clause.
SELECT * FROM movies WHERE year BETWEEN 1990 AND 2000 AND genre = 'comedy';

# The OR operator can also be used to combine more than one condition in a WHERE clause. The OR operator evaluates each 
# condition separately and if any of the conditions are true then the row is added to the result set.
SELECT * FROM movies WHERE genre = 'comedy' OR year < 1980;

# to list the data in our result set in a particular order. DESC is a keyword in SQL that is used with ORDER BY to sort the results 
# in descending order (high to low or Z-A). Here, it sorts all of the movies from highest to lowest by their IMDb rating. ASC is a 
# keyword in SQL that is used with ORDER BY to sort the results in ascending order.
SELECT * FROM movies 
ORDER BY imdb_rating DESC;

# LIMIT lets you specify the maximum number of rows the result set will have. only returns the three lowest rated movies.
SELECT * FROM movies 
ORDER BY imdb_rating ASC LIMIT 3;

### AGGREGATION ###

# COUNT() is a function that takes the name of a column as an argument and counts the number of rows where the column is not NULL. 
# Here, we want to count every row so we pass * as an argument.
SELECT COUNT(*) FROM fake_apps;

# to return the total number of free apps in the table
SELECT COUNT(*) FROM fake_apps 
WHERE price = 0;

# Count the number of apps at each price. GROUP BY is only used with aggregate functions. It is used in collaboration with the 
# SELECT statement to arrange identical data into groups. Here, our aggregate function is COUNT() and we are passing price as an 
# argument to GROUP BY. It is usually helpful to SELECT the column you pass as an argument to GROUP BY. Here we select price and 
# COUNT(*). You can see that the result set is organized into two columns making it easy to see the number of apps at each price.
SELECT price, COUNT (*) FROM fake_apps 
GROUP BY price;

# Count the total number of apps at each price that have been downloaded more than 20,000 times
SELECT price, COUNT(*) FROM fake_apps 
WHERE downloads > 20000 
GROUP BY PRICE;

# What is the total number of downloads for all of the apps combined. SUM() is a function that takes the name of a column as an 
# argument and returns the sum of all the values in that column.
SELECT SUM(downloads) FROM fake_apps;

# Calculate the total number of downloads for each category
SELECT category, SUM(downloads) FROM fake_apps 
GROUP BY category;

# MAX() is a function that takes the name of a column as an argument and returns the largest value in that column. MIN() is opposite
SELECT MAX(downloads) FROM fake_apps;

# Return the names of the most downloaded apps in each category
SELECT name, category, MAX(downloads) FROM fake_apps 
GROUP BY category;

# AVERAGE - AVG(). ROUND(var, number) - rounding the average number of downloads to two decimal places for each price. 
SELECT price, ROUND(AVG(downloads), 2) FROM fake_apps GROUP BY price;

# Round the average number of downloads to the nearest integer for each price.
SELECT price, ROUND(AVG(downloads)) FROM fake_apps GROUP BY price;

### MULTIPLE TABLES ###

# PRIMARY KEY serves as a unique identifier for each row or record in a given table. The primary key is an id value for a record. 
# We're going to use this value to connect artists to the albums they have produced. By specifying that the id column is the 
# PRIMARY KEY, SQL makes sure that none of the values in this column are NULL & each value in this column is unique.
# A table can not have more than one PRIMARY KEY column.
CREATE TABLE artists (id INTEGER PRIMARY KEY, name TEXT);

# A foreign key is a column that contains the primary key of another table in the database to connect rows in two different tables. 
# Unlike primary keys, foreign keys do not need to be unique and can be NULL. Here, artist_id is a foreign key in the albums table. 

# combines data from both tables. One way to query multiple tables is to write a SELECT statement with multiple table names separated 
# by a comma. This is also known as a cross join. When querying more than one table, column names need to be specified by 
# table_name.column_name.
SELECT albums.name, albums.year, artists.name FROM albums, artists;

# JOINs are used to combine rows from two or more tables. The most common type of join in SQL is an inner join. An inner join will 
# combine rows from different tables if the join condition is true.
# SELECT * specifies the columns our result set will have. FROM albums specifies the first table we are querying. JOIN artists ON 
# specifies the type of join we are going to use as well as the name of the second table. Here, we want to do an inner join and the 
# second table we want to query is artists. albums.artist_id = artists.id is the join condition that describes how the two tables are 
# related to each other. We know it will only match one row in the artists table because id is the PRIMARY KEY of artists.
SELECT * FROM albums 
JOIN artists ON albums.artist_id = artists.id;

# Not every album in our database has an artist. This is a join statement that includes these albums. Outer joins also combine rows 
# from >=2 tables, but unlike inner joins, they do not require the join condition to be met. Instead, every row in the left table is 
# returned in the result set, and if the join condition is not met, then NULL values are used to fill in the columns from the right 
# table.
SELECT * FROM albums LEFT 
JOIN artists ON albums.artist_id = artists.id;

# AS allows to rename a column or table. The columns have not been renamed in either table. The aliases only appear in the result set.
SELECT albums.name AS 'Album', albums.year, artists.name AS 'Artist'
FROM albums
JOIN artists ON albums.artist_id = artists.id
WHERE albums.year > 1980;

### TABLE TRANSFORMATION AND SUBQUERIES ### 

# Select ten rows from the flights table.
SELECT * FROM flights LIMIT 10;

# To know which flights had an origin airport with an elevation greater than 2000 feet: first create a subquery that finds the 
# airports with elevation greater than 2000 from the airports table. Next, take the result set of the subquery and use it to filter 
# on the flights table, to find the flight detail that meets the elevation criteria.
Select * FROM flights 
WHERE origin in (SELECT code FROM airports WHERE elevation > 2000);
# It's a non-correlated subquery - can be run independently of the outer query and can be used to complete a multi-step transformation.

# to look at a selection of flights whose origin airport is a seaplane base, designated by SEAPLANE_BASE. The facility type of an 
# airport is located in the fac_type field of the airports table.
SELECT * FROM flights 
WHERE origin in (SELECT code FROM airports WHERE fac_type = 'SEAPLANE_BASE');

# To know how many flights there are on average, for all Fridays in a given month from the flights table. First, we’d need to calculate
# the number of flights per day, and then to calculate the average based on the daily flight count for each day of the week.
# The inner query provides the count of flights by day, and the outer query uses the inner query’s result set to compute the average 
# by day of week of a given month.
Select a.dep_month, a.dep_day_of_week, AVG(a.flight_count) AS average_flights 
FROM (SELECT dep_month, dep_day_of_week, dep_date, COUNT(*) AS flight_count FROM flights
     GROUP BY 1,2,3) a
     GROUP BY 1,2
     ORDER BY 1,2;

# find the average total distance flown by day of week and month. Be sure to alias the outer query as average_distance and the inner 
# query as flight_distance. 
SELECT a.dep_month, a.dep_day_of_week, AVG(a.flight_distance) AS average_distance
  FROM (SELECT dep_month, dep_day_of_week, dep_date, sum(distance) AS flight_distance FROM flights
         GROUP BY 1,2,3) a
         GROUP BY 1,2
         ORDER BY 1,2;





