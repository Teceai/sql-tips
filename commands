# Data types: INTEGER (whole number), TEXT (text string), DATE (YYYY-MM-DD), REAL (decimal value)
# Operators: = equals, != not equals, > greater than, < less than, >= greater than or equal to, <= less than or equal to

CREATE TABLE table_name (column_1 data_type, column_2 data_type, column_3 data_type);

# Add a row to the table. In the code editor type
INSERT INTO table_name (column_1, column_2, column_3) VALUES (1, 'Justin Bieber', 21);
INSERT INTO table_name (column_1, column_2, column_3) VALUES (2, 'Beyonce Knowles', 33); 
INSERT INTO table_name (column_1, column_2, column_3) VALUES (3, 'Jeremy Lin', 26); 
INSERT INTO table_name (column_1, column_2, column_3) VALUES (4, 'Taylor Swift', 26);

# edit a row. UPDATE is a clause that edits a row in the table. SET is a clause that indicates the column to edit. 22 is the new value 
# that is going to be inserted into the edited column. WHERE is a clause that indicates which row(s) to update with the new column value
UPDATE table_name SET column_3 = 22 WHERE column_1 = 1;

# Add a new column to the table. ADD COLUMN is a clause that lets add a new column to a table. TEXT is the data type for the new column
ALTER TABLE table_name ADD COLUMN twitter_handle TEXT;

# The DELETE FROM statement deletes one or more rows from a table. WHERE is a clause that lets select which rows to delete. IS NULL is a
# condition in SQL that returns true when the value is NULL and false otherwise.
DELETE FROM table_name WHERE twitter_handle IS NULL;

### QUERING ###

# return information from a relational database. To view the table
SELECT * FROM table_name;
# * - allows to select every column in a table without having to name each one.

# SELECT returns all data in the column_2 of the table_name table.
SELECT column_2 FROM table_name;

# look at multiple columns.
SELECT name, imdb_rating FROM movies;

# return unique values. filters out all duplicate values. genre - name of the column to display. FROM movies indicates the table.
SELECT DISTINCT genre FROM movies;

# This statement filters the result set to only include movies with IMDb ratings greater than 8
SELECT * FROM movies WHERE imdb_rating > 8;

# LIKE is a special operator used with the WHERE clause to search for a specific pattern in a column. Here, we are comparing two 
# movies with the same name but are spelled differently. Se_en represents a pattern with a wildcard character. 
SELECT * FROM movies WHERE name LIKE 'Se_en';

# % - matches zero or more missing letters in the pattern. A% matches all movies with names begin with "A". %a matches all that 
# end with "a". %man% - any movie that contains the word "man" in its name will be returned. LIKE is not case sensitive.
SELECT * FROM movies WHERE name LIKE 'a%';

# The BETWEEN operator is used to filter the result set within a certain range. The values can be numbers, text, dates. 
# This statement filters the result set to only include movies with names that begin with letters "A" up to but not including "J".
SELECT * FROM movies WHERE name BETWEEN 'A' AND 'J';
# Only include movies with years between 1990 up to and including 2000.
SELECT * FROM movies WHERE year BETWEEN 1990 AND 2000;

# Sometimes you want to combine multiple conditions in a WHERE clause to make the result set more specific and useful. 
# One way of doing this is to use the AND operator. AND genre = 'comedy' is the second condition in the WHERE clause.
SELECT * FROM movies WHERE year BETWEEN 1990 AND 2000 AND genre = 'comedy';

# The OR operator can also be used to combine more than one condition in a WHERE clause. The OR operator evaluates each 
# condition separately and if any of the conditions are true then the row is added to the result set.
SELECT * FROM movies WHERE genre = 'comedy' OR year < 1980;

# to list the data in our result set in a particular order. DESC is a keyword in SQL that is used with ORDER BY to sort the results 
# in descending order (high to low or Z-A). Here, it sorts all of the movies from highest to lowest by their IMDb rating. ASC is a 
# keyword in SQL that is used with ORDER BY to sort the results in ascending order.
SELECT * FROM movies ORDER BY imdb_rating DESC;

# LIMIT lets you specify the maximum number of rows the result set will have. only returns the three lowest rated movies.
SELECT * FROM movies ORDER BY imdb_rating ASC LIMIT 3;






